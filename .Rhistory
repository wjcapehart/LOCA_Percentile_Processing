x = c(1.,2.,3.,4.)
quantile(x)
quantile(x, type=1)
quantile(x, type=2)
quantile(x, type=3)
quantile(x, type=4)
quantile(x, type=5)
quantile(x, type=6)
quantile(x, type=7)
quantile(x, type=8)
quantile(x, type=9)
exit
exit
q()
directory = "/maelstrom2/LOCA_GRIDDED_ENSEMBLES/LOCA_NGP/climate_divisions/"
rData_files = intersect(list.files(path    = directory,
pattern = "NGP_LOCA_nCLIMDIV_"),
list.files(path    = directory,
pattern = "RData"))
rData_files
rData_files = intersect(list.files(path    = directory,
pattern = "NGP_LOCA_nCLIMDIV_"),
list.files(path    = directory,
pattern = "_Yearly.RData"))
Completed_Divisions = str_sub(string = rData_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 4)
library(stringr)
library(forcats)
library(readr)
library(tidyverse)
library(lubridate)
rData_files = intersect(list.files(path    = directory,
pattern = "NGP_LOCA_nCLIMDIV_"),
list.files(path    = directory,
pattern = "_Yearly.RData"))
Completed_Divisions = str_sub(string = rData_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 4)
prefix    = "NGP_LOCA_nCLIMDIV_"
rData_files = intersect(list.files(path    = directory,
pattern = "NGP_LOCA_nCLIMDIV_"),
list.files(path    = directory,
pattern = "_Yearly.RData"))
Completed_Divisions = str_sub(string = rData_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 4)
save(Completed_Divisions, file = str_c(directory,
"Completed_Divisions",
".RData",
sep=""))
rData_files = intersect(list.files(path    = directory,
pattern = "NGP_LOCA_nCLIMDIV_"),
list.files(path    = directory,
pattern = "_Yearly.RData"))
Completed_Divisions = str_sub(string = rData_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 4)
save(Completed_Divisions, file = str_c(directory,
"Completed_Divisions",
".RData",
sep=""))
print(rData_files)
rData_files = intersect(list.files(path    = directory,
pattern = "NGP_LOCA_nCLIMDIV_"),
list.files(path    = directory,
pattern = "_Yearly.RData"))
Completed_Divisions = str_sub(string = rData_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 4)
save(Completed_Divisions, file = str_c(directory,
"Completed_Divisions",
".RData",
sep=""))
print(Completed_Divisions)
library(stringr)
library(forcats)
library(readr)
library(tidyverse)
library(lubridate)
library(ncdf4)
directory = "/maelstrom2/LOCA_GRIDDED_ENSEMBLES/LOCA_NGP/huc_08_basins/"
prefix    = "NGP_LOCA_HUC08_"
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = ".csv"))
for (csv_file in csv_files) {
shell_command = str_c("ls -altr ",
csv_file,
sep = "")
a <- system(shell_command, intern = TRUE)
a
}
for (csv_file in csv_files) {
shell_command = str_c("ls -altr ",
directory,
csv_file,
sep = "")
a <- system(shell_command, intern = TRUE)
a
}
for (csv_file in csv_files) {
for (csv_file in csv_files) {
shell_command = str_c("ls -altr ",
directory,
csv_file,
sep = "")
shell_command
# a <- system(shell_command, intern = TRUE)
}
}
directory = "/maelstrom2/LOCA_GRIDDED_ENSEMBLES/LOCA_NGP/huc_08_basins/"
prefix    = "NGP_LOCA_HUC08_"
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = ".csv"))
for (csv_file in csv_files) {
shell_command = str_c("ls -altr ",
directory,
csv_file,
sep = "")
shell_command
# a <- system(shell_command, intern = TRUE)
}
directory = "/maelstrom2/LOCA_GRIDDED_ENSEMBLES/LOCA_NGP/huc_08_basins/"
prefix    = "NGP_LOCA_HUC08_"
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = ".csv"))
csv_files
csv_files = list.files(path    = directory,
pattern = ".csv")
csv_files
library(stringr)
library(forcats)
library(readr)
library(tidyverse)
library(lubridate)
library(ncdf4)
directory = "/maelstrom2/LOCA_GRIDDED_ENSEMBLES/LOCA_NGP/huc_08_basins/"
prefix    = "NGP_LOCA_HUC08_"
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = ".csv"))
csv_files = list.files(path    = directory,
pattern = ".csv")
csv_files
for (csv_file in csv_files) {
shell_command = str_c("ls -altr ",
directory,
csv_file,
sep = "")
shell_command
# a <- system(shell_command, intern = TRUE)
}
csv_file  = csv_files[1]
shell_command = str_c("ls -altr ",
directory,
csv_file,
sep = "")
shell_command
system(shell_command, intern = TRUE)
shell_command = str_c("tail -n 1  ",
directory,
csv_file,
"| grep 'bcc-csm1-1-m_r1i1p1,rcp85,MEAN' | grep '2099-12-31'",
sep = "")
shell_command
system(shell_command, intern = TRUE)
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = ".csv"))
csv_files
list.files(path    = directory,
pattern = prefix)
list.files(path    = directory,
pattern = ".csv")
csv_files = list.files(path    = directory,
pattern = ".csv")
csv_files
for (csv_file in csv_files) {
shell_command = str_c("tail -n 1  ",
directory,
csv_file,
sep = "") #                         " | grep bcc-csm1-1-m_r1i1p1,rcp85,MEAN | grep 2099-12-31",
a = system(shell_command, intern = TRUE)
if (str_detect(a,"bcc-csm1-1-m_r1i1p1,rcp85,MEAN") &
str_detect(a,"2099-12-31" )) {
print(csv_file)
}
}
Divisions = str_sub(string = csv_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 8)
print(Divisions)
division = Divisions[1]
filename = str_c(directory,
"NGP_LOCA_HUC08_",
division,
sep = "")
filename
filename = str_c(directory,
"NGP_LOCA_HUC08_",
division,
sep = "")
print(filename)
print(loca_daily$Division[1])
print(filename)
shell_command = str_c("tail -n 1  ",
filename,
".csv",
sep = "")
shell_command
shell_command = str_c("tail -n 1  ",
filename,
".csv",
sep = "")
a = system(shell_command, intern = TRUE)
a
if (str_detect(a,"bcc-csm1-1-m_r1i1p1,rcp85,MEAN") &
str_detect(a,"2099-12-31" )) {
print(csv_file)
}
if (str_detect(a,"bcc-csm1-1-m_r1i1p1,rcp85,MEAN") &
str_detect(a,"2099-12-31" )) {
print(csv_file)
} else {
print("nope!")
}
load(file=url("http://kyrill.ias.sdsmt.edu/wjc/eduresources/HUC08_Missouri_River_Basin.Rdata"))
Divisions_factor = factor(HUC08_MRB_LUT$HUC08_Code_ID)
library(stringr)
library(forcats)
library(readr)
library(tidyverse)
library(lubridate)
library(stringr)
library(forcats)
library(readr)
library(tidyverse)
library(lubridate)
directory = "/maelstrom2/LOCA_GRIDDED_ENSEMBLES/LOCA_NGP/huc_08_basins/done/"
prefix    = "NGP_LOCA_HUCS_"
outpref   = "NGP_LOCA_HUC08_"
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = "csv.gz"))
load(file=url("http://kyrill.ias.sdsmt.edu/wjc/eduresources/HUC08_Missouri_River_Basin.Rdata"))
Divisions_factor = factor(HUC08_MRB_LUT$HUC08_Code_ID)
Ensembles = c("ACCESS1-0_r1i1p1",
"ACCESS1-3_r1i1p1",
"CCSM4_r6i1p1",
"CESM1-BGC_r1i1p1",
"CESM1-CAM5_r1i1p1",
"CMCC-CMS_r1i1p1",
"CMCC-CM_r1i1p1",
"CNRM-CM5_r1i1p1",
"CSIRO-Mk3-6-0_r1i1p1",
"CanESM2_r1i1p1",
"FGOALS-g2_r1i1p1",
"GFDL-CM3_r1i1p1",
"GFDL-ESM2G_r1i1p1",
"GFDL-ESM2M_r1i1p1",
"HadGEM2-AO_r1i1p1",
"HadGEM2-CC_r1i1p1",
"HadGEM2-ES_r1i1p1",
"IPSL-CM5A-LR_r1i1p1",
"IPSL-CM5A-MR_r1i1p1",
"MIROC-ESM_r1i1p1",
"MIROC-ESM-CHEM_r1i1p1",
"MIROC5_r1i1p1",
"MPI-ESM-LR_r1i1p1",
"MPI-ESM-MR_r1i1p1",
"MRI-CGCM3_r1i1p1",
"NorESM1-M_r1i1p1",
"bcc-csm1-1-m_r1i1p1")
Divisions = str_sub(string = csv_files,
start  = str_length(string = prefix) + 1,
end    = str_length(string = prefix) + 8)
csv_files  = str_remove(csv_files, ".gz")
csv_files = intersect(list.files(path    = directory,
pattern = prefix),
list.files(path    = directory,
pattern = "csv.gz"))
csv_files  = str_remove(csv_files, ".gz")
start_years    = c(1951, 1961, 1976, 2011, 2036, 2061, 2070, 1956, 2006)
period_length  = c(  30,  30,    30,   30,   30,   30,   30,   50,  50)
end_years      = start_years + period_length -1
start_years    = c(1951, 1961, 1976, 2011, 2036, 2061, 2070, 1956, 2006)
period_length  = c(  30,  30,    30,   30,   30,   30,   30,   50,  50)
end_years      = start_years + period_length -1
center_years = 0.5 * (end_years + start_years) - 0.5
center_years
Periods = tibble(start_years   = start_years,
center_years  = center_years,
end_years     = end_years,
period_length = period_length)
start_years    = c(1951, 1961, 1976, 2011, 2036, 2061, 2070, 1956, 2006)
period_length  = c(  30,  30,    30,   30,   30,   30,   30,   50,  50)
end_years      = start_years + period_length -1
center_years = 0.5 * (end_years + start_years) - 0.5
center_years
Periods = tibble(start_years   = start_years,
center_years  = center_years,
end_years     = end_years,
period_length = period_length)
library(tidyverse)
start_years    = c(1951, 1961, 1976, 2011, 2036, 2061, 2070, 1956, 2006)
period_length  = c(  30,  30,    30,   30,   30,   30,   30,   50,  50)
end_years      = start_years + period_length -1
center_years = 0.5 * (end_years + start_years) - 0.5
center_years
Periods = tibble(start_years   = start_years,
center_years  = center_years,
end_years     = end_years,
period_length = period_length)
View(Periods)
View(Periods)
start_years    = c(1951, 1961, 1976, 2011, 2036, 2061, 2070, 1956, 2006, 2025, 2050)
period_length  = c(  30,  30,    30,   30,   30,   30,   30,   50,   50,   50,  50)
end_years      = start_years + period_length -1
center_years = 0.5 * (end_years + start_years) - 0.5
center_years
Periods = tibble(start_years   = start_years,
center_years  = center_years,
end_years     = end_years,
period_length = period_length)
start_years    = c(1951, 1961, 1976, 2011, 2036, 2061, 2070, 1956, 2006, 2026, 2050)
period_length  = c(  30,  30,    30,   30,   30,   30,   30,   50,   50,   50,  50)
end_years      = start_years + period_length -1
load("/Users/wjc/GitHub/LOCA_Percentile_Processing/Climate_Zones_Name_LUT.Rdata")
View(Climate_Zones_Name_LUT)
View(Climate_Zones_Name_LUT)
load("/Users/wjc/GitHub/LOCA_Percentile_Processing/Climate_Zones_Name_LUT.Rdata")
load("/Users/wjc/GitHub/FEW_CROP_MIGRAGTION/Climate_Zones_Name_LUT.Rdata")
load("/Users/wjc/GitHub/FEW_CROP_MIGRAGTION/NGP_CLIMATE_ZONES.Rdata")
unique_zones = climate_regions$US_CAN_Zones
unique_zones = unique(climate_regions$US_CAN_Zones)
Available_Climate_Zones_Name_LUT = Climate_Zones_Name_LUT
load(tidyverse)
library(tidyverse)
avz = tibble(Full_Zone_Code_Numeric = as.number(as.character(unique_zones)))
avz = tibble(Full_Zone_Code_Numeric = as.numeric(as.character(unique_zones)))
Climate_Zones_Name_LUT$Full_Zone_Code_Numeric = as.numeric(as.character(Climate_Zones_Name_LUT$Full_Zone_Code))
Climate_Zones_Name_LUT
avz
Climate_Zones_Name_LUT = left_join(Climate_Zones_Name_LUT, avz, by=Full_Zone_Code_Numeric)
Climate_Zones_Name_LUT = left_join(Climate_Zones_Name_LUT, avz)
Available_Climate_Zones_Name_LUT$Full_Zone_Code_Numeric = as.numeric(as.character(Available_Climate_Zones_Name_LUT$Full_Zone_Code))
Available_Climate_Zones_Name_LUT = left_join( Available_Climate_Zones_Name_LUT, avz)
Available_Climate_Zones_Name_LUT = right_join( Available_Climate_Zones_Name_LUT, avz)
View(Available_Climate_Zones_Name_LUT)
View(Available_Climate_Zones_Name_LUT)
write_csv(Available_Climate_Zones_Name_LUT, file="~/Desktop/Avail_nClimDiv_LUT.csv")
write_csv(Available_Climate_Zones_Name_LUT, path="~/Desktop/Avail_nClimDiv_LUT.csv")
load("/Users/wjc/GitHub/LOCA_Percentile_Processing/Climate_Zones_Name_CAN_LUT.Rdata")
